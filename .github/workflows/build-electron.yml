name: Build Electron App

on:
  push:
    branches: [ master ] # Запускать для релизов только при пуше в master
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  version_bump:
    # Запускается только при пуше в master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.extract_version.outputs.new_version }}
      new_tag: ${{ steps.extract_version.outputs.new_tag }}
    # Права на запись для коммита и тега
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Нужна полная история для определения версии и тегов
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x # Используем ту же версию Node.js
          cache: 'npm'

      - name: Install dependencies (required for npm version)
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version using npm and create tag
        id: version_bump_npm
        run: |
          # Увеличиваем патч-версию, создаем коммит и тег (формат тега по умолчанию vX.Y.Z)
          # Сообщение коммита включает [skip ci] для предотвращения зацикливания
          # Флаг --force используется на случай наличия некритичных изменений в workdir после npm ci
          npm version patch --force -m "chore(release): %s [skip ci]"

      - name: Push changes and tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Отправляем коммит и новый тег в ветку master
          git push origin master --follow-tags

      - name: Extract new version and tag
        id: extract_version
        run: |
          # Извлекаем версию из package.json
          VERSION=$(jq -r .version package.json)
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          # Получаем самый свежий тег (созданный npm version)
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "new_tag=${TAG_NAME}" >> $GITHUB_OUTPUT

  build:
    needs: version_bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]
    permissions:
      contents: read 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run make

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-${{ matrix.os }}
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.zip
            out/make/**/*.exe
            out/make/**/*.msi
            out/make/**/*.AppImage
            !out/make/**/RELEASES*
          if-no-files-found: warn

  create_release:
    needs: [version_bump, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Используем тег из outputs задачи version_bump
          tag_name: ${{ needs.version_bump.outputs.new_tag }}
          # Используем версию из outputs задачи version_bump
          name: Release ${{ needs.version_bump.outputs.new_version }}
          body: |
            Автоматический релиз версии ${{ needs.version_bump.outputs.new_version }}
          draft: false
          prerelease: false
          files: electron-app-*/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 