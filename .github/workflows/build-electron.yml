name: Build Tauri App & Release

on:
  push:
    branches: [ master ] # Запускать при пуше в master
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  version_bump:
    # Эта задача остается без изменений (управляет версией и тегом)
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.extract_version.outputs.new_version }}
      new_tag: ${{ steps.extract_version.outputs.new_tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x # Используем ту же версию Node.js
          cache: 'npm'

      - name: Install dependencies (required for npm version)
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version using npm and create tag
        id: version_bump_npm
        run: |
          npm version patch --force -m "chore(release): %s [skip ci]"

      - name: Push changes and tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin master --follow-tags

      - name: Extract new version and tag
        id: extract_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "new_tag=${TAG_NAME}" >> $GITHUB_OUTPUT

  # --- Измененная задача сборки ---
  build_windows_portable:
    needs: version_bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: windows-latest # Запускаем только на Windows
    permissions:
      contents: read # Для checkout и tauri-action

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Явная установка Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x # Или lts/*
          cache: 'npm'

      # --- Явная установка Rust ---
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # --- Установка зависимостей фронтенда ---
      - name: Install frontend dependencies
        run: npm ci

      # --- Добавляем прямую команду сборки Tauri ---
      - name: Build Tauri app
        run: ./node_modules/.bin/tauri build --release

      # --- DEBUG: Проверяем содержимое папки target/release ---
      - name: List Target Directory Contents
        shell: pwsh
        run: |
          Write-Host "Checking contents of src-tauri/target/release:"
          Get-ChildItem -Path "src-tauri/target/release/" -ErrorAction SilentlyContinue # Показываем содержимое, если папка есть
          if (-not (Test-Path "src-tauri/target/release/")) {
            Write-Host "::warning::Directory src-tauri/target/release/ not found! Listing src-tauri/target/ instead."
            Get-ChildItem -Path "src-tauri/target/" -ErrorAction SilentlyContinue
          }

      # --- Ручное архивирование и загрузка остаются ---
      - name: Archive Windows standalone build
        shell: pwsh
        run: |
          # Сначала получаем нужные файлы/папки, исключая bundle и .pdb
          # Затем передаем их в Compress-Archive
          Get-ChildItem -Path "src-tauri/target/release/" -Exclude "bundle", "*.pdb" | Compress-Archive -DestinationPath "trading-star-launcher-${{ needs.version_bump.outputs.new_version }}-windows-x64-portable.zip" -Force

      - name: Upload Windows portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable-app
          path: trading-star-launcher-${{ needs.version_bump.outputs.new_version }}-windows-x64-portable.zip
          if-no-files-found: error

  # --- Измененная задача создания релиза ---
  create_release:
    needs: [version_bump, build_windows_portable] # Зависит от новой задачи сборки
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Для создания релиза и загрузки ассетов

    steps:
      - name: Download Windows portable artifact
        uses: actions/download-artifact@v4
        with:
          # Скачиваем артефакт по имени, указанному при загрузке
          name: windows-portable-app
          # Указываем путь для скачивания (необязательно, по умолчанию корень)
          path: release-assets

      - name: Display structure of downloaded files # Опционально для отладки
        run: ls -R release-assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version_bump.outputs.new_tag }}
          name: Release ${{ needs.version_bump.outputs.new_version }}
          body: |
            Автоматический релиз версии ${{ needs.version_bump.outputs.new_version }}

            **Windows (Portable):**
            Загрузите `trading-star-launcher-...-windows-x64-portable.zip`.
            *Требует установленный [WebView2 Runtime](https://developer.microsoft.com/en-us/microsoft-edge/webview2/).*
          draft: false
          prerelease: false
          # Указываем паттерн для загрузки ZIP-архива из папки, куда он был скачан
          files: release-assets/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 