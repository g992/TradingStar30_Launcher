import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import path from 'path';
import { spawn, ChildProcess } from 'child_process';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// --- Управление дочерним процессом ---
let appProcess: ChildProcess | null = null;
let mainWindow: BrowserWindow | null = null; // Храним ссылку на окно для отправки вывода

// --- Конец управления ---

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
    },
    icon: path.join(__dirname, '../assets/icons/favicon.ico')
  });

  // Загружаем URL, предоставленный WebpackPlugin
  // В режиме разработки это будет URL сервера Vite (например, http://localhost:3000)
  // В режиме продакшена это будет путь к файлу (file://...)
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Открывать DevTools только в режиме разработки
  if (process.env.NODE_ENV !== 'production') {
    mainWindow.webContents.openDevTools();
  }

  // Очистка ссылки на окно при закрытии
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

// --- Обработчики IPC ---

// Выбор директории
ipcMain.handle('select-directory', async () => {
  if (!mainWindow) return undefined; // Проверка на существование окна
  const result = await dialog.showOpenDialog(mainWindow, {
    properties: ['openFile'] // Или 'openDirectory' в зависимости от того, что нужно
    // Можно добавить фильтры для исполняемых файлов, если нужно:
    // filters: [
    //   { name: 'Applications', extensions: ['exe', 'app', 'bat', 'sh'] },
    //   { name: 'All Files', extensions: ['*'] }
    // ]
  });
  if (result.canceled || result.filePaths.length === 0) {
    return undefined;
  }
  return result.filePaths[0];
});

// Запуск приложения
ipcMain.handle('start-app', async (_event, appPath: string, apiKey: string) => {
  console.log(`[Main] Received start-app request: path=${appPath}, apiKey=${apiKey ? '***' : 'empty'}`);
  if (appProcess) {
    console.warn('[Main] App process already running.');
    return { success: false, message: 'Приложение уже запущено.' };
  }
  if (!appPath) {
    console.warn('[Main] App path is not provided.');
    return { success: false, message: 'Путь к приложению не указан.' };
  }

  try {
    console.log(`[Main] Spawning process: ${appPath}`);
    // Используем spawn. Убедись, что appPath - это путь к исполняемому файлу.
    // Возможно, понадобятся аргументы командной строки (например, apiKey).
    // Пример: appProcess = spawn(appPath, [`--apiKey=${apiKey}`], { stdio: 'pipe' });
    // Если stdout/stderr не нужны в Electron, можно использовать { stdio: 'ignore' }
    // Если нужно передавать apiKey как переменную окружения:
    // appProcess = spawn(appPath, [], { env: { ...process.env, TRADING_STAR_API_KEY: apiKey } });

    // Базовый запуск без аргументов (надо будет адаптировать под реальное приложение)
    appProcess = spawn(appPath, [], { stdio: 'pipe' });

    // Проверяем наличие stdout перед подпиской
    if (appProcess.stdout) {
      appProcess.stdout.on('data', (data) => {
        const message = data.toString();
        console.log(`[App Output]: ${message}`);
        // Отправляем вывод в рендерер
        mainWindow?.webContents.send('app-output', message);
      });
    } else {
      console.warn('[Main] App process stdout is not available.');
    }

    // Проверяем наличие stderr перед подпиской
    if (appProcess.stderr) {
      appProcess.stderr.on('data', (data) => {
        const message = data.toString();
        console.error(`[App Error]: ${message}`);
        // Можно также отправлять ошибки в рендерер, если нужно
        // mainWindow?.webContents.send('app-output', `ERROR: ${message}`);
      });
    } else {
      console.warn('[Main] App process stderr is not available.');
    }

    appProcess.on('close', (code) => {
      console.log(`[Main] App process exited with code ${code}`);
      appProcess = null;
      // Уведомляем рендерер, что процесс завершился (опционально)
      mainWindow?.webContents.send('app-stopped');
    });

    appProcess.on('error', (err) => {
      console.error(`[Main] Failed to start app process: ${err.message}`);
      appProcess = null;
      // Уведомляем рендерер об ошибке
      mainWindow?.webContents.send('app-error', err.message);
      // Этот обработчик вызывается, если сам spawn не удался (файл не найден и т.п.)
    });

    console.log('[Main] App process spawned successfully.');
    return { success: true };

  } catch (error) {
    console.error('[Main] Error spawning process:', error);
    appProcess = null;
    // Проверяем тип ошибки перед доступом к message
    const errorMessage = error instanceof Error ? error.message : String(error);
    return { success: false, message: `Ошибка запуска: ${errorMessage}` };
  }
});

// Остановка приложения
ipcMain.handle('stop-app', async () => {
  console.log('[Main] Received stop-app request');
  if (appProcess) {
    console.log('[Main] Killing app process...');
    // Используем SIGTERM (по умолчанию), чтобы дать приложению шанс завершиться корректно
    // Если не работает, можно попробовать 'SIGKILL'
    const killed = appProcess.kill();
    if (killed) {
      console.log('[Main] Kill signal sent successfully.');
    } else {
      console.warn('[Main] Failed to send kill signal.');
      // Можно попробовать принудительно завершить, если kill не сработал
      // appProcess.kill('SIGKILL');
    }
    appProcess = null; // Сбрасываем ссылку
  } else {
    console.warn('[Main] No app process to stop.');
  }
});

// --- Конец обработчиков IPC ---

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  // --- Регистрация обработчиков после готовности приложения ---
  // (Перенесли сюда, чтобы быть уверенными, что mainWindow создано
  // хотя dialog можно вызывать и раньше, но для консистентности)
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  // Завершаем дочерний процесс при закрытии всех окон
  if (appProcess) {
    console.log('[Main] Killing app process on window-all-closed.');
    appProcess.kill();
    appProcess = null;
  }
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
